import logging
import time
import asyncio
import os
import aiohttp
from aiogram import Bot, Dispatcher
from dotenv import load_dotenv

# Load .env if available
load_dotenv()

BOT_TOKEN = os.getenv("7561497263:AAEpy_c8ZwtxxUmd5Bcmy7A8qA8UvHwZC0s")
CHAT_ID = os.getenv("8114144078")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)

async def send_telegram_message(message):
    try:
        await bot.send_message(CHAT_ID, message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

async def scan_arbitrage_opportunities():
    try:
        logging.info("üîç –°–∫–∞–Ω–∏—Ä—É—é —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞...")
        spread_info = "ETH: Binance $1800 / OKX $1820 ‚û§ Spread: +1.11%"
        await send_telegram_message(f"üìà –ù–∞–π–¥–µ–Ω –∞—Ä–±–∏—Ç—Ä–∞–∂:\n{spread_info}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {e}")
        await send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞:\n{e}")

async def main_loop():
    await send_telegram_message("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.")
    while True:
        try:
            await scan_arbitrage_opportunities()
            await asyncio.sleep(10)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª 10 —Å–µ–∫—É–Ω–¥
        except Exception as e:
            logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ñ–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ.")
            await send_telegram_message(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:\n{e}")
            await asyncio.sleep(15)

if __name__ == "__main__":
    try:
        asyncio.run(main_loop())
    except Exception as e:
        logging.exception("–ë–æ—Ç –∞–≤–∞—Ä–∏–π–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è.")
        asyncio.run(send_telegram_message(f"üõë –ë–æ—Ç –∞–≤–∞—Ä–∏–π–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è:\n{e}"))
